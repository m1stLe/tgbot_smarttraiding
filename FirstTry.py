import os
import telebot
import requests
import numpy as np
import time
import threading
from telebot import types

# üîë –¢–æ–∫–µ–Ω
# 1. –ù–∞ Render —É–∫–∞–∂–∏ TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
# 2. –õ–æ–∫–∞–ª—å–Ω–æ –±–æ—Ç –≤–æ–∑—å–º—ë—Ç —Ç–æ–∫–µ–Ω, –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8250034607:AAEWwZMF4awfu3jykjOpqXcuH32eYj562mk")
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# ========= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =========
CACHE = []
LAST_UPDATE = 0
LOCK = threading.Lock()

# ========= –§–£–ù–ö–¶–ò–ò =========

def safe_request(url, params=None, retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–æ–º"""
    for i in range(retries):
        try:
            r = requests.get(url, params=params, timeout=10)
            if r.status_code == 200:
                return r.json()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}, –ø–æ–ø—ã—Ç–∫–∞ {i+1}")
            time.sleep(1)
    return None

def calculate_RSI(prices, period=14):
    """–í—ã—á–∏—Å–ª—è–µ–º RSI"""
    prices = np.array(prices, dtype=float)
    if len(prices) < period:
        return 50.0

    deltas = np.diff(prices)
    seed = deltas[:period]
    up = seed[seed >= 0].sum() / period
    down = -seed[seed < 0].sum() / period
    rs = up / down if down != 0 else 0
    rsi = np.zeros_like(prices)
    rsi[:period] = 100. - 100. / (1. + rs)

    for i in range(period, len(prices)):
        delta = deltas[i - 1]
        upval = max(delta, 0)
        downval = -min(delta, 0)
        up = (up * (period - 1) + upval) / period
        down = (down * (period - 1) + downval) / period
        rs = up / down if down != 0 else 0
        rsi[i] = 100. - 100. / (1. + rs)

    return float(rsi[-1])

def get_top_symbols(limit=150):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-150 USDT-–ø–∞—Ä —Å Binance –ø–æ –æ–±—ä—ë–º—É"""
    data = safe_request("https://api.binance.com/api/v3/ticker/24hr")
    if not data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Binance")
        return []

    usdt_pairs = [coin for coin in data if coin.get("symbol", "").endswith("USDT")]
    try:
        sorted_pairs = sorted(usdt_pairs, key=lambda x: float(x.get("quoteVolume", 0)), reverse=True)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", e)
        return []

    return sorted_pairs[:limit]

def update_cache():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –º–æ–Ω–µ—Ç"""
    global CACHE, LAST_UPDATE
    print("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

    symbols = get_top_symbols(150)
    if not symbols:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–µ—à–∞")
        return

    results = []

    for coin in symbols:
        symbol = coin.get("symbol")
        if not symbol:
            continue

        try:
            url = "https://api.binance.com/api/v3/klines"
            params = {"symbol": symbol, "interval": "1h", "limit": 30}
            data = safe_request(url, params)
            if not data:
                continue

            closes = []
            for c in data:
                if len(c) > 4:
                    try:
                        closes.append(float(c[4]))
                    except ValueError:
                        continue

            if len(closes) < 15:
                continue

            rsi = calculate_RSI(closes)

            results.append({
                "symbol": symbol,
                "rsi": round(rsi, 2),
                "price": round(closes[-1], 4),
                "volume": float(coin.get("quoteVolume", 0))
            })

            time.sleep(0.05)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            continue

    results = sorted(results, key=lambda x: x["rsi"])
    with LOCK:
        CACHE = results
        LAST_UPDATE = time.time()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –º–æ–Ω–µ—Ç:", len(CACHE))

def cache_updater():
    """–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        try:
            update_cache()
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞:", e)
        time.sleep(300)

# ========= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =========

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üî• –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã")
    btn2 = types.KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    btn3 = types.KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    markup.add(btn1, btn2, btn3)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "1) –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ø-150 –º–æ–Ω–µ—Ç –ø–æ –æ–±—ä—ë–º—É –Ω–∞ Binance.\n"
        "2) –°—á–∏—Ç–∞—é RSI –ø–æ 1-—á–∞—Å–æ–≤—ã–º —Å–≤–µ—á–∞–º.\n"
        "3) –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ø-10 –º–æ–Ω–µ—Ç —Å —Å–∞–º—ã–º –Ω–∏–∑–∫–∏–º RSI.\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá"
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    if message.text == "üî• –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã":
        interesting_message(message)
    elif message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        bot.send_message(message.chat.id, "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ Binance –∏ RSI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç üöÄ")
    elif message.text == "üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ":
        with LOCK:
            if LAST_UPDATE == 0:
                bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
            else:
                bot.send_message(message.chat.id, f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞: {time.ctime(LAST_UPDATE)}")

def interesting_message(message):
    with LOCK:
        if not CACHE:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É...")
            return
        coins = CACHE[:10]

    text = "üî• –¢–æ–ø-10 –º–æ–Ω–µ—Ç —Å —Å–∞–º—ã–º –Ω–∏–∑–∫–∏–º RSI:\n\n"
    for c in coins:
        if c['rsi'] < 30:
            mood = "üü¢ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)"
        elif c['rsi'] > 70:
            mood = "üî¥ (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω)"
        else:
            mood = "üü° (–Ω–µ–π—Ç—Ä–∞–ª)"
        text += f"‚Ä¢ {c['symbol']}\n"
        text += f"   üíµ –¶–µ–Ω–∞: ${c['price']}\n"
        text += f"   üìâ RSI: {c['rsi']} {mood}\n"
        text += f"   üìä –û–±—ä—ë–º: {c['volume']:,}\n\n"
    bot.send_message(message.chat.id, text)

# ========= –ó–ê–ü–£–°–ö =========
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    update_cache()  # –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞

    updater_thread = threading.Thread(target=cache_updater, daemon=True)
    updater_thread.start()

    while True:
        try:
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ polling:", e)
            time.sleep(5)
